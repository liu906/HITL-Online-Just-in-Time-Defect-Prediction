df1$fold==1
df1[df1$fold==1,]
McNemar(df1[df1$fold==1,],df2[df2$fold==1,],1,F)
McNemar( df1[df1$fold==0,c('fold','TP','FP','TN','FN')],df2[df2$fold==1,c('fold','TP','FP','TN','FN')],1,F)
mcnemar_res <- McNemar( df1[df1$fold==0,c('fold','TP','FP','TN','FN')],df2[df2$fold==1,c('fold','TP','FP','TN','FN')],1,F)
mcnemar_res
data.frame(ts=df1[df1$fold==0,"current timestamp"], fold=0,mcnemar=mcnemar_res)
mcnemar_res > 3.8414588
data.frame(ts=ts,pvalue=pvalue)
pvalue <- wilcox.test(sub1,sub2,paired=F)$p.value
data.frame(ts=ts,pvalue=pvalue)
data.frame(ts=ts,pvalue=pvalue,answer=pvalue<0.05)
sub1
sub2
if(pvalue<0.05){
if(mean(sub1)>mean(sub2)){
answer = 'non-HITL is better'
}else{
answer = 'HITL is better'
}
}else{
answer = 'no significant difference'
}
data.frame(ts=ts,pvalue=pvalue,answer=answer)
res <- rbind(res,data.frame(ts=ts,pvalue=pvalue,answer=answer))
res <- data.frame(ts=ts,pvalue=pvalue,answer=answer)
res <- rbind(res,data.frame(ts=ts,pvalue=pvalue,answer=answer))
res
stop=1000
first_flag = T
for (ts in ts_list) {
if(stop<0){
break
}
stop <- stop - 1
sub1 <- df1[df1$`current timestamp`==ts,indicator]
sub2 <- df2[df1$`current timestamp`==ts,indicator]
pvalue <- wilcox.test(sub1,sub2,paired=F)$p.value
if(pvalue<0.05){
if(mean(sub1)>mean(sub2)){
answer = 'non-HITL is better'
}else{
answer = 'HITL is better'
}
}else{
answer = 'no significant difference'
}
if(first_flag){
first_flag <- F
res <- data.frame(ts=ts,pvalue=pvalue,answer=answer)
}else{
res <- rbind(res,data.frame(ts=ts,pvalue=pvalue,answer=answer))
}
}
sub1
sub2
df1$`current timestamp`==ts
ts
sub1 <- df1[df1$`current timestamp`==ts,indicator]
sub2 <- df2[df1$`current timestamp`==ts,indicator]
pvalue <- wilcox.test(sub1,sub2,paired=F)$p.value
if(pvalue<0.05){
if(mean(sub1)>mean(sub2)){
answer = 'non-HITL is better'
}else{
answer = 'HITL is better'
}
}else{
answer = 'no significant difference'
}
pvalue
is.na(pvalue)
if(!is.na(pvalue)&&pvalue<0.05){
if(mean(sub1)>mean(sub2)){
answer = 'non-HITL is better'
}else{
answer = 'HITL is better'
}
}else{
answer = 'no significant difference'
}
ts_list <- intersect(ts1,ts2)
stop=1000
first_flag = T
for (ts in ts_list) {
if(stop<0){
break
}
stop <- stop - 1
sub1 <- df1[df1$`current timestamp`==ts,indicator]
sub2 <- df2[df1$`current timestamp`==ts,indicator]
pvalue <- wilcox.test(sub1,sub2,paired=F)$p.value
if(!is.na(pvalue)&&pvalue<0.05){
if(mean(sub1)>mean(sub2)){
answer = 'non-HITL is better'
}else{
answer = 'HITL is better'
}
}else{
answer = 'no significant difference'
}
if(first_flag){
first_flag <- F
res <- data.frame(ts=ts,pvalue=pvalue,answer=answer)
}else{
res <- rbind(res,data.frame(ts=ts,pvalue=pvalue,answer=answer))
}
}
res
# 导入ggplot2包
library(ggplot2)
# 假设你的数据框叫做data，包含timestamp和value列
# 你可以根据实际情况调整颜色的设置
color_palette <- c("non-HITL is better" = "red", "HITL is better" = "green", "no significant difference" = "blue")
# 绘制堆叠条形图
ggplot(res, aes(x = ts, fill = answer)) +
geom_bar(position = "stack") +
scale_fill_manual(values = color_palette) +
labs(title = "Stacked Bar Chart of Variable Over Time",
x = "Timestamp",
y = "Count") +
theme_minimal()
library(reshape2)
long <- melt(df, measure.var = 2:4)
long
long <- melt(df, measure.var = 2:4)
long <- transform(long, date = as.Date(long$date, "%d/%m/%Y"), value = factor(value))
long
df <- structure(list(date = c("30/04/2011", "01/05/2011", "02/05/2011", "03/05/2011", "04/05/2011", "05/05/2011", "06/05/2011", "07/05/2011", "08/05/2011", "09/05/2011", "10/05/2011", "11/05/2011", "12/05/2011", "13/05/2011", "14/05/2011", "15/05/2011", "16/05/2011", "17/05/2011", "18/05/2011", "19/05/2011", "20/05/2011", "21/05/2011", "22/05/2011", "23/05/2011", "24/05/2011", "25/05/2011", "26/05/2011", "27/05/2011", "28/05/2011", "29/05/2011", "30/05/2011", "31/05/2011", "01/06/2011", "02/06/2011", "03/06/2011", "04/06/2011", "05/06/2011", "06/06/2011", "07/06/2011", "08/06/2011", "09/06/2011", "10/06/2011", "11/06/2011", "12/06/2011", "13/06/2011", "14/06/2011", "15/06/2011", "16/06/2011", "17/06/2011", "18/06/2011", "19/06/2011", "20/06/2011", "21/06/2011", "22/06/2011", "23/06/2011", "24/06/2011", "25/06/2011", "26/06/2011", "27/06/2011", "28/06/2011", "29/06/2011", "30/06/2011", "01/07/2011", "02/07/2011", "03/07/2011", "04/07/2011", "05/07/2011", "06/07/2011", "07/07/2011", "08/07/2011", "09/07/2011", "10/07/2011", "11/07/2011", "12/07/2011", "13/07/2011", "14/07/2011", "15/07/2011", "16/07/2011", "17/07/2011", "18/07/2011", "19/07/2011", "20/07/2011", "21/07/2011", "22/07/2011", "23/07/2011", "24/07/2011"), a = c(0L, 0L, 1L, 1L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 1L, 1L, 1L, 0L, 0L, 0L, 1L, 1L, 0L, 0L, 0L, 1L, 1L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L), b = c(0L, 1L, 1L, 0L, 0L, 0L, 0L, 1L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 1L, 1L, 0L, 0L, 0L, 0L, 0L, 1L, 1L, 0L, 0L, 0L, 0L, 0L, 1L, 1L, 1L, 1L, 1L), c = c(1L, 1L, 0L, 0L, 0L, 1L, 0L, 1L, 0L, 1L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 1L, 1L, 0L, 0L, 0L, 0L)), .Names = c("date", "a", "b", "c"), class = "data.frame", row.names = c(NA, -86L))
df
ts_list <- intersect(ts1,ts2)
stop=1000
first_flag = T
for (ts in ts_list) {
if(stop<0){
break
}
stop <- stop - 1
sub1 <- df1[df1$`current timestamp`==ts,indicator]
sub2 <- df2[df1$`current timestamp`==ts,indicator]
pvalue <- wilcox.test(sub1,sub2,paired=F)$p.value
if(!is.na(pvalue)&&pvalue<0.05){
if(mean(sub1)>mean(sub2)){
temp <- data.frame(ts=ts,pvalue=pvalue,`non-HITL is better`=1,`HITL is better`=0,`no significant difference`=0)
}else{
temp <- data.frame(ts=ts,pvalue=pvalue,`non-HITL is better`=0,`HITL is better`=1,`no significant difference`=0)
}
}else{
temp <- data.frame(ts=ts,pvalue=pvalue,`non-HITL is better`=0,`HITL is better`=0,`no significant difference`=1)
}
if(first_flag){
first_flag <- F
res <- temp
}else{
res <- rbind(res,temp)
}
}
res
df <- structure(list(date = c("30/04/2011", "01/05/2011", "02/05/2011", "03/05/2011", "04/05/2011", "05/05/2011", "06/05/2011", "07/05/2011", "08/05/2011", "09/05/2011", "10/05/2011", "11/05/2011", "12/05/2011", "13/05/2011", "14/05/2011", "15/05/2011", "16/05/2011", "17/05/2011", "18/05/2011", "19/05/2011", "20/05/2011", "21/05/2011", "22/05/2011", "23/05/2011", "24/05/2011", "25/05/2011", "26/05/2011", "27/05/2011", "28/05/2011", "29/05/2011", "30/05/2011", "31/05/2011", "01/06/2011", "02/06/2011", "03/06/2011", "04/06/2011", "05/06/2011", "06/06/2011", "07/06/2011", "08/06/2011", "09/06/2011", "10/06/2011", "11/06/2011", "12/06/2011", "13/06/2011", "14/06/2011", "15/06/2011", "16/06/2011", "17/06/2011", "18/06/2011", "19/06/2011", "20/06/2011", "21/06/2011", "22/06/2011", "23/06/2011", "24/06/2011", "25/06/2011", "26/06/2011", "27/06/2011", "28/06/2011", "29/06/2011", "30/06/2011", "01/07/2011", "02/07/2011", "03/07/2011", "04/07/2011", "05/07/2011", "06/07/2011", "07/07/2011", "08/07/2011", "09/07/2011", "10/07/2011", "11/07/2011", "12/07/2011", "13/07/2011", "14/07/2011", "15/07/2011", "16/07/2011", "17/07/2011", "18/07/2011", "19/07/2011", "20/07/2011", "21/07/2011", "22/07/2011", "23/07/2011", "24/07/2011"), a = c(0L, 0L, 1L, 1L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 1L, 1L, 1L, 0L, 0L, 0L, 1L, 1L, 0L, 0L, 0L, 1L, 1L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L), b = c(0L, 1L, 1L, 0L, 0L, 0L, 0L, 1L, 1L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 1L, 1L, 0L, 0L, 0L, 0L, 0L, 1L, 1L, 0L, 0L, 0L, 0L, 0L, 1L, 1L, 1L, 1L, 1L), c = c(1L, 1L, 0L, 0L, 0L, 1L, 0L, 1L, 0L, 1L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 2L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 0L, 0L, 0L, 0L, 0L, 0L, 0L, 1L, 1L, 1L, 0L, 0L, 0L, 0L)), .Names = c("date", "a", "b", "c"), class = "data.frame", row.names = c(NA, -86L))
df
head(df)
long <- melt(df, measure.var = 2:4)
long
head(res)
res$pvalue <- NULL
head(res)
long <- melt(df, measure.var = 2:4)
long
long <- melt(res, measure.var = 2:4)
long
long <- transform(long,  value = factor(value))
long
ggplot(long, aes(date, variable)) +
geom_tile(aes(fill = value)) +
scale_fill_manual(values = c("blue", "yellow", "red"))
long
ggplot(long, aes(ts, variable)) +
geom_tile(aes(fill = value)) +
scale_fill_manual(values = c("blue", "yellow", "red"))
long$ts
res
head(res)
ggplot(data, aes(x = ts)) +
geom_bar(aes(fill = factor(non.HITL.is.better)), stat = "identity", position = "stack") +
geom_bar(aes(fill = factor(HITL.is.better)), stat = "identity", position = "stack") +
geom_bar(aes(fill = factor(no.significant.difference)), stat = "identity", position = "stack") +
labs(title = "Values Over Time",
x = "Timestamp",
y = "Count") +
scale_fill_manual(values = c("red", "blue", "green")) +
theme_minimal()
ggplot(res, aes(x = ts)) +
geom_bar(aes(fill = factor(non.HITL.is.better)), stat = "identity", position = "stack") +
geom_bar(aes(fill = factor(HITL.is.better)), stat = "identity", position = "stack") +
geom_bar(aes(fill = factor(no.significant.difference)), stat = "identity", position = "stack") +
labs(title = "Values Over Time",
x = "Timestamp",
y = "Count") +
scale_fill_manual(values = c("red", "blue", "green")) +
theme_minimal()
ggplot(res, aes(x = ts)) +
geom_bar(aes(fill = factor(non.HITL.is.better)), stat = "identity", position = "stack") +
geom_bar(aes(fill = factor(HITL.is.better)), stat = "identity", position = "stack") +
geom_bar(aes(fill = factor(no.significant.difference)), stat = "identity", position = "stack")
ggplot(res, aes(x = ts))
ggplot(res, aes(x = ts)) +
geom_bar(aes(fill = factor(non.HITL.is.better)), stat = "identity", position = "stack") +
ggplot(res, aes(x = ts)) +
geom_bar(aes(fill = factor(non.HITL.is.better)), stat = "identity", position = "stack") +
geom_bar(aes(fill = factor(HITL.is.better)), stat = "identity", position = "stack")
ggplot(res, aes(x = ts)) +
geom_bar(aes(fill = factor(non.HITL.is.better)), stat = "identity", position = "stack") +
geom_bar(aes(fill = factor(HITL.is.better)), stat = "identity", position = "stack")
data_long <- pivot_longer(res, starts_with("non.HITL"), names_to = "type", values_to = "value")
library(tidyr)
data_long <- pivot_longer(res, starts_with("non.HITL"), names_to = "type", values_to = "value")
data_long
# 使用ggplot绘制条形图
ggplot(data_long, aes(x = ts, y = value, fill = type)) +
geom_bar(stat = "identity", position = "stack") +
labs(title = "Values Over Time",
x = "Timestamp",
y = "Count") +
scale_fill_manual(values = c("red", "blue", "green")) +
theme_minimal()
ts_list <- intersect(ts1,ts2)
stop=1000
first_flag = T
for (ts in ts_list) {
if(stop<0){
break
}
stop <- stop - 1
sub1 <- df1[df1$`current timestamp`==ts,indicator]
sub2 <- df2[df1$`current timestamp`==ts,indicator]
pvalue <- wilcox.test(sub1,sub2,paired=F)$p.value
if(!is.na(pvalue)&&pvalue<0.05){
if(mean(sub1)>mean(sub2)){
answer = 'non-HITL is better'
}else{
answer = 'HITL is better'
}
}else{
answer = 'no significant difference'
}
if(first_flag){
first_flag <- F
res <- data.frame(ts=ts,pvalue=pvalue,answer=answer)
}else{
res <- rbind(res,data.frame(ts=ts,pvalue=pvalue,answer=answer))
}
}
head(res)
res[1:20,]
res[40:50,]
# 为每个answer值分配颜色
color_mapping <- c("non-HITL is better" = "red", "HITL is better" = "blue", "no significant difference" = "green")
# 创建一个计数列用于堆叠
data$counter <- 1:nrow(data)
# 使用ggplot绘制堆叠条形图（条形码）
ggplot(data, aes(x = counter, fill = answer)) +
geom_bar(position = "stack", stat = "identity") +
labs(title = "Stacked Bar Chart (Barcode) of Answer Over Rows",
x = "Row Number",
y = "Count") +
scale_fill_manual(values = color_mapping) +
theme_minimal()
ggplot(data, aes(x = counter, fill = answer))
# 创建你的数据框
data <- data.frame(
ts = c(1325780207, 1325780844, 1325780988, 1325786994, 1325805311, 1325806364, 1325806490, 1325806657, 1325810062, 1325813825, 1325814717),
pvalue = c(6.900010e-07, 1.044843e-06, 2.683983e-06, 4.356487e-05, 2.474691e-04, 1.445133e-03, 2.641983e-03, 1.697025e-02, 1.442792e-03, 1.676761e-03, 8.685361e-05),
answer = c("non-HITL is better", "non-HITL is better", "non-HITL is better", "non-HITL is better", "non-HITL is better", "non-HITL is better", "non-HITL is better", "non-HITL is better", "non-HITL is better", "non-HITL is better", "non-HITL is better")
)
# 为每个answer值分配颜色
color_mapping <- c("non-HITL is better" = "red", "HITL is better" = "blue", "no significant difference" = "green")
# 创建一个计数列用于堆叠
data$counter <- 1:nrow(data)
# 使用ggplot绘制堆叠条形图（条形码）
ggplot(data, aes(x = counter, fill = answer)) +
geom_bar(position = "stack", stat = "identity") +
labs(title = "Stacked Bar Chart (Barcode) of Answer Over Rows",
x = "Row Number",
y = "Count") +
scale_fill_manual(values = color_mapping) +
theme_minimal()
# 使用ggplot绘制堆叠条形图（条形码）
ggplot(data, aes(x = counter, fill = answer,y=1)) +
geom_bar(position = "stack", stat = "identity") +
labs(title = "Stacked Bar Chart (Barcode) of Answer Over Rows",
x = "Row Number",
y = "Count") +
scale_fill_manual(values = color_mapping) +
theme_minimal()
data <- res
# 为每个answer值分配颜色
color_mapping <- c("non-HITL is better" = "red", "HITL is better" = "blue", "no significant difference" = "green")
# 创建一个计数列用于堆叠
data$counter <- 1:nrow(data)
# 使用ggplot绘制堆叠条形图（条形码）
ggplot(data, aes(x = counter, fill = answer,y=1)) +
geom_bar(position = "stack", stat = "identity") +
labs(title = "Stacked Bar Chart (Barcode) of Answer Over Rows",
x = "Row Number",
y = "Count") +
scale_fill_manual(values = color_mapping) +
theme_minimal()
# 使用ggplot绘制堆叠条形图（条形码）
ggplot(data, aes(x = counter, fill = answer,y=0.1)) +
geom_bar(position = "stack", stat = "identity") +
labs(title = "Stacked Bar Chart (Barcode) of Answer Over Rows",
x = "Row Number",
y = "Count") +
scale_fill_manual(values = color_mapping) +
theme_minimal()
# 使用ggplot绘制堆叠条形图（条形码）
ggplot(data, aes(x = counter, fill = answer,y=0.1)) +
geom_bar(position = "stack", stat = "identity") +
labs(title = "wilcoxon test in real time",
x = "#commit",
) +
scale_fill_manual(values = color_mapping) +
theme_minimal()
# 使用ggplot绘制堆叠条形图（条形码）
ggplot(data, aes(x = counter, fill = answer,y=0.1)) +
geom_bar(position = "stack", stat = "identity") +
labs(title = "wilcoxon test in real time",
x = "#commit",
y = "") +
scale_fill_manual(values = color_mapping) +
theme_minimal()
# 使用ggplot绘制堆叠条形图（条形码）
ggplot(data, aes(x = counter, fill = answer,y=0.1)) +
geom_bar(position = "stack", stat = "identity") +
labs(title = "wilcoxon test in real time",
x = "#commit",
y = "") +
scale_fill_manual(values = color_mapping) +
theme_minimal() +
theme(axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank())
# 使用ggplot绘制堆叠条形图（条形码）
ggplot(data, aes(x = counter, fill = answer,y=0.1)) +
geom_bar(position = "stack", stat = "identity") +
labs(title = "wilcoxon test in real time",
x = "#commit",
y = "") +
scale_fill_manual(values = color_mapping) +
theme(axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank())
# 使用ggplot绘制堆叠条形图（条形码）
ggplot(data, aes(x = counter, fill = answer,y=0.1)) +
geom_bar(position = "stack", stat = "identity") +
labs(title = "wilcoxon test in real time",
x = "#commit",
y = "") +
scale_fill_manual(values = color_mapping) +
theme_minimal() +
theme(axis.title.y = element_blank(), axis.text.y = element_blank(), axis.ticks.y = element_blank())
# 使用ggplot绘制堆叠条形图（条形码）
ggplot(data, aes(x = counter, fill = answer,y=0.1)) +
geom_bar(position = "stack", stat = "identity") +
labs(title = "wilcoxon test in real time",
x = "#commit",
y = "") +
scale_fill_manual(values = color_mapping) +
theme_minimal() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.background = element_blank(),
panel.grid = element_blank())
# 使用ggplot绘制堆叠条形图（条形码）
ggplot(data, aes(x = counter, fill = answer,y=0.1)) +
# 使用ggplot绘制堆叠条形图（条形码）
ggplot(data, aes(x = counter, fill = answer,y=0.1)) +
geom_bar(position = "stack", stat = "identity") +
labs(title = "wilcoxon test in real time",
x = "#commit",
y = "") +
scale_fill_manual(values = color_mapping) +
theme_minimal() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.background = element_blank(),
# panel.grid = element_blank()
)
# 使用ggplot绘制堆叠条形图（条形码）
ggplot(data, aes(x = counter, fill = answer,y=0.1)) +
geom_bar(position = "stack", stat = "identity") +
labs(title = "wilcoxon test in real time",
x = "#commit",
y = "") +
scale_fill_manual(values = color_mapping) +
theme_minimal() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.background = element_blank(),
panel.grid = element_blank()
)
# 使用ggplot绘制堆叠条形图（条形码）
ggplot(data, aes(x = counter, fill = answer,y=0.1)) +
geom_bar(position = "stack", stat = "identity") +
labs(title = "wilcoxon test in real time",
x = "#commit",
y = "") +
scale_fill_manual(values = color_mapping) +
theme_minimal() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.background = element_blank(),
panel.grid = element_blank()
)+
labs(fill = "Statistical Result")
# 使用ggplot绘制堆叠条形图（条形码）
ggplot(data, aes(x = counter, fill = answer,y=0.1)) +
geom_bar(position = "stack", stat = "identity") +
labs(title = "wilcoxon test in real time",
x = "#commit",
y = "") +
scale_fill_manual(values = color_mapping) +
theme_minimal() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.background = element_blank(),
panel.grid = element_blank(),
legend.text = element_text(family = "Times", size = 10),
legend.title = element_text(family = "Times", size = 12)
)+
labs(fill = "Statistical Result")
# 使用ggplot绘制堆叠条形图（条形码）
ggplot(data, aes(x = counter, fill = answer,y=0.1)) +
geom_bar(position = "stack", stat = "identity") +
labs(title = "wilcoxon test in real time",
x = "#commit",
y = "") +
scale_fill_manual(values = color_mapping) +
theme_minimal() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.background = element_blank(),
panel.grid = element_blank(),
legend.text = element_text(family = "Times", size = 8),
legend.title = element_text(family = "Times", size = 10)
)+
labs(fill = "Statistical Result")
# 为每个answer值分配颜色
color_mapping <- c("non-HITL is better" = "#F35E5A", "HITL is better" = "blue", "no significant difference" = "#B0B0B0")
# 创建一个计数列用于堆叠
data$counter <- 1:nrow(data)
# 使用ggplot绘制堆叠条形图（条形码）
ggplot(data, aes(x = counter, fill = answer,y=0.1)) +
geom_bar(position = "stack", stat = "identity") +
labs(title = "wilcoxon test in real time",
x = "#commit",
y = "") +
scale_fill_manual(values = color_mapping) +
theme_minimal() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.background = element_blank(),
panel.grid = element_blank(),
legend.text = element_text(family = "Times", size = 8),
legend.title = element_text(family = "Times", size = 10)
)+
labs(fill = "Statistical Result")
# 使用ggplot绘制堆叠条形图（条形码）
ggplot(data, aes(x = counter, fill = answer,y=0.1)) +
geom_bar(position = "stack", stat = "identity") +
labs(title = "wilcoxon test in real time",
x = "#commit",
y = "") +
scale_fill_manual(values = color_mapping) +
theme_minimal() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.background = element_blank(),
panel.grid = element_blank(),
legend.text = element_text(family = "Times New Roman", size = 8),
legend.title = element_text(family = "Times New Roman", size = 10)
)+
labs(fill = "Statistical Result")
install.packages("extrafont")
# install.packages("extrafont")
library(extrafont)
# 为每个answer值分配颜色
color_mapping <- c("non-HITL is better" = "#F35E5A", "HITL is better" = "blue", "no significant difference" = "#B0B0B0")
# 创建一个计数列用于堆叠
data$counter <- 1:nrow(data)
# 使用ggplot绘制堆叠条形图（条形码）
ggplot(data, aes(x = counter, fill = answer,y=0.1)) +
geom_bar(position = "stack", stat = "identity") +
labs(title = "wilcoxon test in real time",
x = "#commit",
y = "") +
scale_fill_manual(values = color_mapping) +
theme_minimal() +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
panel.background = element_blank(),
panel.grid = element_blank(),
legend.text = element_text(family = "Times New Roman", size = 8),
legend.title = element_text(family = "Times New Roman", size = 10)
)+
labs(fill = "Statistical Result")
font_import()
